# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Multi-step multi-platform build

on:
  push:
    branches: ["main"]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check-version.outputs.should-run }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      # Step to fetch the latest release version
      - name: Get latest release version
        id: latest-version
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "none")
          if [ "$LATEST_TAG" = "none" ]; then
          echo "No tags found."
          else
          echo "Latest tag is $LATEST_TAG"
          fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      # Step to read version.py and compare
      - name: Check version in ver.py
        id: check-version
        run: |
          CURRENT_VERSION=$(cat ver.py | grep -o "'.*'")
          echo "Current version is $CURRENT_VERSION"

          if [ "$CURRENT_VERSION" == "$LATEST_TAG" ]; then
            echo "Version $CURRENT_VERSION has not been incremented vs already released $LATEST_TAG. Build will be cancelled."
            echo "::set-output name=should-run::false"
            exit 1
          else
            echo "Current version $CURRENT_VERSION differs from latest tag $LATEST_TAG. Build will continue."
            echo "::set-output name=should-run::true"
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.should-run == 'true'

    strategy:
      matrix:
        include:
          - os: windows-latest
            build: ./build_scripts/win32_build.bat
            name: EdgeNodeLauncher-WIN32
            platformDependencies: ""

          - os: ubuntu-24.04
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            name: LINUX_Ubuntu-24.04
            platformDependencies: sudo apt-get update && sudo apt install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev --fix-missing

          - os: ubuntu-22.04
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            name: LINUX_Ubuntu-22.04
            platformDependencies: sudo apt-get update && sudo apt install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev --fix-missing

          - os: ubuntu-20.04
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            name: LINUX_Ubuntu-20.04
            platformDependencies: sudo apt-get update && sudo apt-get install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev --fix-missing

          - os: macos-latest
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            name: EdgeNodeLauncher-OSX-arm64

    name: Build installers ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions: write-all

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10.11
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.11"
      - name: Read app version
        id: app_version
        shell: bash
        run: |
          VERSION=$(cat ver.py | grep -o "'.*'" | tr -d "'")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      
      # Create release
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          name: Version ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          allowUpdates: true
          draft: false
          makeLatest: true
          
      # Create EULA file for Windows build
      - name: Create EULA file for Windows build
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          mkdir -p wix
          echo Creating EULA file...
          echo {\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}} > wix\License.rtf
          echo {\*\generator Riched20 10.0.19041}\viewkind4\uc1 >> wix\License.rtf
          echo \pard\sa200\sl276\slmult1\f0\fs22\lang9 END USER LICENSE AGREEMENT FOR EDGENODELAUNCHER\par >> wix\License.rtf
          echo \par >> wix\License.rtf
          echo IMPORTANT: PLEASE READ THIS END USER LICENSE AGREEMENT CAREFULLY BEFORE INSTALLING THE EDGENODELAUNCHER APPLICATION.\par >> wix\License.rtf
          echo \par >> wix\License.rtf
          echo By installing or using the EdgeNodeLauncher application, you agree to be bound by the terms of this Agreement. If you do not agree, do not install or use the application.\par >> wix\License.rtf
          echo \par >> wix\License.rtf
          echo 1. LICENSE GRANT\par >> wix\License.rtf
          echo You are granted a non-exclusive license to use the software for personal or business purposes.\par >> wix\License.rtf
          echo \par >> wix\License.rtf
          echo 2. RESTRICTIONS\par >> wix\License.rtf
          echo You may not reverse engineer, decompile, or disassemble the software.\par >> wix\License.rtf
          echo \par >> wix\License.rtf
          echo 3. NO WARRANTY\par >> wix\License.rtf
          echo THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.\par >> wix\License.rtf
          echo \par >> wix\License.rtf
          echo 4. LIMITATION OF LIABILITY\par >> wix\License.rtf
          echo IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DAMAGES ARISING FROM THE USE OF THIS SOFTWARE.\par >> wix\License.rtf
          echo \par >> wix\License.rtf
          echo 5. GOVERNING LAW\par >> wix\License.rtf
          echo This agreement is governed by the laws of the jurisdiction where the software owner is located.\par >> wix\License.rtf
          echo } >> wix\License.rtf
          echo EULA file created successfully.
          type wix\License.rtf
          echo Saving EULA file to build_scripts directory...
          copy wix\License.rtf build_scripts\EULA.rtf
          
      - run: ${{ matrix.platformDependencies }}
      - name: Setup env
        run: |
          pip install -r requirements.txt
          pip3 install --upgrade PyInstaller pyinstaller-hooks-contrib
      - name: Build app
        run: ${{ matrix.build }}

      - name: Sign Windows app
        if: runner.os == 'Windows'
        uses: sslcom/esigner-codesign@develop
        with:
          # Sign and timestamp code object.
          command: sign
          # SSL.com account username
          username: ${{ secrets.SSL_USERNAME }}
          # SSL.com account password.
          password: ${{ secrets.SSL_PASSWORD }}
          # Credential ID for signing certificate.
          credential_id: ${{ secrets.SSL_CREDENTIAL_ID }}
          # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)
          totp_secret: ${{ secrets.SSL_TOTP_SECRET }}
          # Path of code object to be signed. (DLL, JAR, EXE, MSI files vb... )
          file_path: ${{ github.workspace }}/dist/EdgeNodeLauncher.exe
          # Directory where signed code object(s) will be written.
          output_path: ${{ github.workspace }}/signed
          # Scan code before sign
          malware_block: true
          # Environment Name, For Production 'PROD' or For Staging 'TEST'
          environment_name: PROD

      - name: Replace non-signed version with signed one
        if: runner.os == 'Windows'
        run: |
          rm dist/EdgeNodeLauncher.exe
          mv signed/EdgeNodeLauncher.exe dist/EdgeNodeLauncher.exe

      - name: Create msi
        if: runner.os == 'Windows'
        run: |
          echo Checking EULA file exists:
          dir wix
          dir build_scripts
          echo EULA content:
          type wix\License.rtf
          echo "====="
          echo Running MSI build script...
          ./build_scripts/build_msi.bat

      - name: Sign the msi installer
        if: runner.os == 'Windows'
        uses: sslcom/esigner-codesign@develop
        with:
          # Sign and timestamp code object.
          command: sign
          # SSL.com account username
          username: ${{ secrets.SSL_USERNAME }}
          # SSL.com account password.
          password: ${{ secrets.SSL_PASSWORD }}
          # Credential ID for signing certificate.
          credential_id: ${{ secrets.SSL_CREDENTIAL_ID }}
          # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)
          totp_secret: ${{ secrets.SSL_TOTP_SECRET }}
          # Path of code object to be signed. (DLL, JAR, EXE, MSI files vb... )
          file_path: ${{ github.workspace }}/dist/EdgeNodeLauncher.msi
          # Directory where signed code object(s) will be written.
          output_path: ${{ github.workspace }}/signed
          # Scan code before sign
          malware_block: true
          # Environment Name, For Production 'PROD' or For Staging 'TEST'
          environment_name: PROD

      - name: Replace non-signed version with signed one
        if: runner.os == 'Windows'
        run: |
          rm dist/EdgeNodeLauncher.msi
          mv signed/EdgeNodeLauncher.msi dist/EdgeNodeLauncher.msi

      # Upload Windows executable
      - name: Upload Windows EXE as artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: EdgeNodeLauncher-EXE-v${{ env.VERSION }}
          path: dist/EdgeNodeLauncher.exe
          overwrite: true

      # Upload Windows MSI
      - name: Upload MSI as artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: EdgeNodeLauncher-MSI-v${{ env.VERSION }}
          path: dist/EdgeNodeLauncher.msi
          overwrite: true

      # Upload Linux binary
      - name: Upload Linux binary as artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: EdgeNodeLauncher-${{ matrix.name }}-v${{ env.VERSION }}
          path: dist/EdgeNodeLauncher
          overwrite: true

      # For macOS, zip the .app directory first
      - name: Zip macOS App
        if: runner.os == 'macOS'
        run: |
          cd dist
          zip -r EdgeNodeLauncher-v${{ env.VERSION }}-macOS.zip EdgeNodeLauncher.app
          cd ..

      # Upload Windows EXE to release
      - name: Upload Windows EXE to release
        if: runner.os == 'Windows'
        uses: svenstaro/upload-release-action@master
        with:
          file: dist/EdgeNodeLauncher.exe
          asset_name: EdgeNodeLauncher-Windows-v${{ env.VERSION }}.exe
          tag: ${{ env.VERSION }}
          repo_name: ${{ github.repository }}
          overwrite: true

      # Upload Windows MSI to release
      - name: Upload MSI to release
        if: runner.os == 'Windows'
        uses: svenstaro/upload-release-action@master
        with:
          file: dist/EdgeNodeLauncher.msi
          asset_name: EdgeNodeLauncher-Windows-v${{ env.VERSION }}.msi
          tag: ${{ env.VERSION }}
          repo_name: ${{ github.repository }}
          overwrite: true

      # Upload Linux binary to release
      - name: Upload Linux binary to release
        if: runner.os == 'Linux'
        uses: svenstaro/upload-release-action@master
        with:
          file: dist/EdgeNodeLauncher
          asset_name: EdgeNodeLauncher-v${{ env.VERSION }}-${{ matrix.name }}
          tag: ${{ env.VERSION }}
          repo_name: ${{ github.repository }}
          overwrite: true

      # Upload macOS app to release
      - name: Upload macOS app to release
        if: runner.os == 'macOS'
        uses: svenstaro/upload-release-action@master
        with:
          file: dist/EdgeNodeLauncher-v${{ env.VERSION }}-macOS.zip
          asset_name: EdgeNodeLauncher-v${{ env.VERSION }}-macOS.zip
          tag: ${{ env.VERSION }}
          repo_name: ${{ github.repository }}
          overwrite: true

  create-release:
    runs-on: ubuntu-latest
    needs: build
    permissions: write-all

    steps:
      - uses: actions/checkout@v3
      - name: Retrieve version
        id: retrieve_version
        run: |
          VERSION=$(cat ver.py | grep -o "'.*'" | tr -d "'")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      # For potential debugging
      - name: List available artifacts
        run: |
          echo "This step only lists artifacts that were made available to download"
          echo "VERSION: ${{ env.VERSION }}"