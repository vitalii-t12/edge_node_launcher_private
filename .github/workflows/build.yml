# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Multi-step multi-platform build

on:
  push:
    branches: ["main"]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check-version.outputs.should-run }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      # Step to fetch the latest release version
      - name: Get latest release version
        id: latest-version
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "none")
          if [ "$LATEST_TAG" = "none" ]; then
            echo "No tags found."
          else
            echo "Latest tag is $LATEST_TAG"
          fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      # Step to read version.py and compare
      - name: Check version in ver.py
        id: check-version
        run: |
          CURRENT_VERSION=$(cat ver.py | grep -o "'.*'")
          echo "Current version is $CURRENT_VERSION"

          if [ "$CURRENT_VERSION" == "$LATEST_TAG" ]; then
            echo "Version $CURRENT_VERSION has not been incremented vs already released $LATEST_TAG. Build will be cancelled."
            echo "::set-output name=should-run::false"
            exit 1
          else
            echo "Current version $CURRENT_VERSION differs from latest tag $LATEST_TAG. Build will continue."
            echo "::set-output name=should-run::true"
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.should-run == 'true'
    strategy:
      matrix:
        include:
          - os: windows-latest
            build: ./build_scripts/win32_build.bat
            name: WIN32
            platformDependencies: ""

          - os: ubuntu-24.04
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            name: LINUX_Ubuntu-24.04
            platformDependencies: sudo apt-get update && sudo apt install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev --fix-missing

          - os: ubuntu-22.04
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            name: LINUX_Ubuntu-22.04
            platformDependencies: sudo apt-get update && sudo apt install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev --fix-missing

          - os: ubuntu-20.04
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            name: LINUX_Ubuntu-20.04
            platformDependencies: sudo apt-get update && sudo apt-get install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev --fix-missing

          - os: macos-latest
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            name: OSX-arm64

    name: Build installers ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions: write-all

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10.11
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.11"

      - name: Read app version
        id: app_version
        shell: bash
        run: |
          VERSION=$(cat ver.py | grep -o "'.*'" | tr -d "'")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - run: ${{ matrix.platformDependencies }}

      - name: Setup env
        run: |
          pip install -r requirements.txt
          pip3 install --upgrade PyInstaller pyinstaller-hooks-contrib

      - name: Build app
        run: ${{ matrix.build }}

      - name: Sign Windows app
        if: runner.os == 'Windows'
        uses: sslcom/esigner-codesign@develop
        with:
          # Sign and timestamp code object.
          command: sign
          # SSL.com account username
          username: ${{ secrets.SSL_USERNAME }}
          # SSL.com account password.
          password: ${{ secrets.SSL_PASSWORD }}
          # Credential ID for signing certificate.
          credential_id: ${{ secrets.SSL_CREDENTIAL_ID }}
          # OAuth TOTP Secret
          totp_secret: ${{ secrets.SSL_TOTP_SECRET }}
          # Path of code object to be signed (EXE).
          file_path: ${{ github.workspace }}/dist/EdgeNodeLauncher.exe
          # Directory where signed code object(s) will be written.
          output_path: ${{ github.workspace }}/signed
          # Scan code before sign
          malware_block: true
          # Environment Name, For Production 'PROD' or For Staging 'TEST'
          environment_name: PROD

      - name: Replace non-signed version with signed one
        if: runner.os == 'Windows'
        run: |
          rm dist/EdgeNodeLauncher.exe
          mv signed/EdgeNodeLauncher.exe dist/EdgeNodeLauncher.exe

      - name: Create msi
        if: runner.os == 'Windows'
        run: |
          echo Checking EULA file exists:
          dir build_scripts
          echo EULA content:
          type wix\License.rtf
          echo "====="
          echo Running MSI build script...
          ./build_scripts/build_msi.bat

      - name: Sign the msi installer
        if: runner.os == 'Windows'
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.SSL_USERNAME }}
          password: ${{ secrets.SSL_PASSWORD }}
          credential_id: ${{ secrets.SSL_CREDENTIAL_ID }}
          totp_secret: ${{ secrets.SSL_TOTP_SECRET }}
          file_path: ${{ github.workspace }}/dist/EdgeNodeLauncher.msi
          output_path: ${{ github.workspace }}/signed
          malware_block: true
          environment_name: PROD

      - name: Replace non-signed version with signed one
        if: runner.os == 'Windows'
        run: |
          rm dist/EdgeNodeLauncher.msi
          mv signed/EdgeNodeLauncher.msi dist/EdgeNodeLauncher.msi

      # Create AppImage for Linux
      - name: Create AppImage
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 desktop-file-utils
          echo "Creating tarball as fallback option"
          mkdir -p dist
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          cp dist/EdgeNodeLauncher AppDir/usr/bin/
          cp assets/r1_icon.png AppDir/EdgeNodeLauncher.png
          cp assets/r1_icon.png AppDir/usr/share/icons/hicolor/256x256/apps/EdgeNodeLauncher.png
          cat > AppDir/EdgeNodeLauncher.desktop << EOF
          [Desktop Entry]
          Name=EdgeNodeLauncher
          Exec=EdgeNodeLauncher
          Icon=EdgeNodeLauncher
          Type=Application
          Categories=Utility;
          EOF
          cp AppDir/EdgeNodeLauncher.desktop AppDir/usr/share/applications/
          desktop-file-validate AppDir/EdgeNodeLauncher.desktop || echo "Desktop file validation issues detected"
          cat > AppDir/AppRun << EOF
          #!/bin/bash
          SELF=\$(readlink -f "\$0")
          HERE=\${SELF%/*}
          export PATH="\${HERE}/usr/bin:\${PATH}"
          "\${HERE}/usr/bin/EdgeNodeLauncher" "\$@"
          EOF
          chmod +x AppDir/AppRun
          export ARCH=x86_64
          ./appimagetool -v AppDir dist/EdgeNodeLauncher-v${{ env.VERSION }}-${{ matrix.name }}.AppImage || {
            echo "AppImage creation failed, trying alternative method..."
            ./appimagetool --appimage-extract
            ./squashfs-root/AppRun -v AppDir dist/EdgeNodeLauncher-v${{ env.VERSION }}-${{ matrix.name }}.AppImage || {
              echo "Both AppImage creation methods failed. Will use tarball fallback."
            }
          }

      # Create macOS .app bundle
      - name: Create macOS .app bundle
        if: runner.os == 'macOS'
        run: |
          cd dist
          # Create a zip of the .app directory
          ditto -c -k --keepParent EdgeNodeLauncher.app EdgeNodeLauncher-v${{ env.VERSION }}-macOS.app.zip
          cd ..

      # Create zip files for Windows
      - name: Zip apps for Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd dist
          Compress-Archive -Path 'EdgeNodeLauncher.exe' -DestinationPath "EdgeNodeLauncher-v${{ env.VERSION }}-Windows.exe.zip" -Force
          Compress-Archive -Path 'EdgeNodeLauncher.msi' -DestinationPath "EdgeNodeLauncher-v${{ env.VERSION }}-Windows.msi.zip" -Force
          # Combined zip
          Compress-Archive -Path 'EdgeNodeLauncher.exe', 'EdgeNodeLauncher.msi' -DestinationPath "EdgeNodeLauncher-v${{ env.VERSION }}-${{ matrix.name }}.zip" -Force
          cd ..

      # Create zip files for macOS
      - name: Zip apps for macOS
        if: runner.os == 'macOS'
        run: |
          cd dist
          zip -r EdgeNodeLauncher-v${{ env.VERSION }}-${{ matrix.name }}.zip EdgeNodeLauncher.app
          cd ..

      # Upload artifacts (NOT to release, just to Actions storage)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: EdgeNodeLauncher-${{ matrix.name }}-v${{ env.VERSION }}
          path: dist/
          overwrite: true


  # This job only runs once ALL matrix builds have finished successfully.
  create-release:
    runs-on: ubuntu-latest
    needs: build
    permissions: write-all

    steps:
      - uses: actions/checkout@v3

      - name: Retrieve version
        id: retrieve_version
        run: |
          VERSION=$(cat ver.py | grep -o "'.*'" | tr -d "'")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Release version is: $VERSION"

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create or update the Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          name: "Version ${{ env.VERSION }}"
          tag: ${{ env.VERSION }}
          allowUpdates: true
          draft: false
          makeLatest: true

      # Example approach: Upload everything from dist/ in one go with file_glob.
      # If you prefer explicit naming, do multiple svenstaro/upload-release-action steps instead
      - name: Upload all artifacts to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.VERSION }}
          file_glob: true
          file: dist/**/* # This grabs everything in `dist` from all OSes
          overwrite: true
