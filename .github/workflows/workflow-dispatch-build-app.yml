name: Multi-platform build on manually selected branch

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run the workflow on"
        required: true
        default: "main"
      build_type:
        description: "Build type for Windows (exe-only, msi-only, or both)"
        required: true
        default: "msi-only"
        type: choice
        options:
          - msi-only
          - exe-only
          - both

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check-version.outputs.should-run }}

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}  # Uses manually selected branch

      - name: Get latest release version
        id: latest-version
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "none")
          if [ "$LATEST_TAG" = "none" ]; then
          echo "No tags found."
          else
          echo "Latest tag is $LATEST_TAG"
          fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Check version in ver.py
        id: check-version
        run: |
          CURRENT_VERSION=$(cat ver.py | grep -o "'.*'")
          echo "Current version is $CURRENT_VERSION"

          if [ "$CURRENT_VERSION" == "$LATEST_TAG" ]; then
            echo "Version $CURRENT_VERSION has not been incremented vs already released $LATEST_TAG. Build will be cancelled."
            echo "::set-output name=should-run::false"
            exit 1
          else
            echo "Current version $CURRENT_VERSION differs from latest tag $LATEST_TAG. Build will continue."
            echo "::set-output name=should-run::true"
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.should-run == 'true'

    strategy:
      matrix:
        include:
          - os: windows-latest
            build: ./build_scripts/win32_build.bat --${{ github.event.inputs.build_type }}
            name: EdgeNodeLauncher-WIN32
            platformDependencies: |
              choco install wixtoolset -y

          - os: ubuntu-24.04
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            name: EdgeNodeLauncher-LINUX_Ubuntu-24.04
            platformDependencies: sudo apt-get update && sudo apt install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev --fix-missing

          - os: ubuntu-22.04
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            name: EdgeNodeLauncher-LINUX_Ubuntu-22.04
            platformDependencies: sudo apt-get update && sudo apt install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev --fix-missing

          - os: ubuntu-20.04
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            name: EdgeNodeLauncher-LINUX_Ubuntu-20.04
            platformDependencies: sudo apt-get update && sudo apt-get install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev --fix-missing

          - os: macos-latest
            build: |
              chmod +x build_scripts/unix_build.sh
              ./build_scripts/unix_build.sh
            zip: zip -r EdgeNodeLauncher-OSX-arm64.zip dist/*
            name: EdgeNodeLauncher-OSX-arm64


    name: Build installers ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions: write-all

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10.11
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.11"
      - name: Read app version
        id: app_version
        shell: bash
        run: |
          VERSION=$(cat ver.py | grep -o "'.*'" | tr -d "'")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - run: ${{ matrix.platformDependencies }}
      - name: Setup env
        run: |
          pip install -r requirements.txt
          pip3 install --upgrade PyInstaller pyinstaller-hooks-contrib

      - name: Build app
        run: ${{ matrix.build }}

      # Only sign EXE if we built it
      - name: Sign Windows exe
        if: runner.os == 'Windows' && (github.event.inputs.build_type == 'exe-only' || github.event.inputs.build_type == 'both')
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.SSL_USERNAME }}
          password: ${{ secrets.SSL_PASSWORD }}
          credential_id: ${{ secrets.SSL_CREDENTIAL_ID }}
          totp_secret: ${{ secrets.SSL_TOTP_SECRET }}
          file_path: ${{ github.workspace }}/dist/EdgeNodeLauncher.exe
          output_path: ${{ github.workspace }}/signed-exe
          malware_block: true
          environment_name: PROD

      # Only sign MSI if we built it
      - name: Sign Windows msi
        if: runner.os == 'Windows' && (github.event.inputs.build_type == 'msi-only' || github.event.inputs.build_type == 'both')
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.SSL_USERNAME }}
          password: ${{ secrets.SSL_PASSWORD }}
          credential_id: ${{ secrets.SSL_CREDENTIAL_ID }}
          totp_secret: ${{ secrets.SSL_TOTP_SECRET }}
          file_path: ${{ github.workspace }}/dist/EdgeNodeLauncher.msi
          output_path: ${{ github.workspace }}/signed-msi
          malware_block: true
          environment_name: PROD

      # Move signed files back to dist
      - name: Replace non-signed versions with signed ones
        if: runner.os == 'Windows'
        run: |
          # Move signed EXE if it exists
          if exist signed-exe\EdgeNodeLauncher.exe (
            if exist dist\EdgeNodeLauncher.exe del dist\EdgeNodeLauncher.exe
            move signed-exe\EdgeNodeLauncher.exe dist\
          )
          
          # Move signed MSI if it exists
          if exist signed-msi\EdgeNodeLauncher.msi (
            move signed-msi\EdgeNodeLauncher.msi dist\
            
            # Create a versioned copy of the MSI
            for /f "tokens=2 delims=''" %%v in ('type ver.py') do set VERSION=%%v
            copy dist\EdgeNodeLauncher.msi dist\EdgeNodeLauncher-v%VERSION%.msi
          )

      # Upload EXE and other non-MSI files
      - name: Save build artifacts (except MSI)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-v${{ env.VERSION }}-${{ github.sha }}
          path: |
            dist/*
            !dist/*.msi

      # Upload MSI file separately (Windows only)
      - name: Save MSI installer as separate artifact
        if: runner.os == 'Windows' && (github.event.inputs.build_type == 'msi-only' || github.event.inputs.build_type == 'both')
        uses: actions/upload-artifact@v4
        with:
          name: EdgeNodeLauncher-MSI-v${{ env.VERSION }}
          path: dist/*.msi

  collect-artifacts:
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - uses: actions/checkout@v3
      - name: Read app version
        id: app_version
        shell: bash
        run: |
          VERSION=$(cat ver.py | grep -o "'.*'" | tr -d "'")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Download Windows build artifacts
        uses: actions/download-artifact@v4
        with:
          name: EdgeNodeLauncher-WIN32-v${{ env.VERSION }}-${{ github.sha }}
          path: ./all-builds/EdgeNodeLauncher-WIN32

      # Download MSI artifacts separately
      - name: Download Windows MSI executable
        uses: actions/download-artifact@v4
        with:
          name: EdgeNodeLauncher-MSI-v${{ env.VERSION }}
          path: ./all-builds/EdgeNodeLauncher-MSI

      - name: Download Ubuntu 24.04 build artifacts
        uses: actions/download-artifact@v4
        with:
          name: EdgeNodeLauncher-LINUX_Ubuntu-24.04-v${{ env.VERSION }}-${{ github.sha }}
          path: ./all-builds/EdgeNodeLauncher-LINUX_Ubuntu-24.04

      - name: Download Ubuntu 22.04 build artifacts
        uses: actions/download-artifact@v4
        with:
          name: EdgeNodeLauncher-LINUX_Ubuntu-22.04-v${{ env.VERSION }}-${{ github.sha }}
          path: ./all-builds/EdgeNodeLauncher-LINUX_Ubuntu-22.04

      - name: Download Ubuntu 20.04 build artifacts
        uses: actions/download-artifact@v4
        with:
          name: EdgeNodeLauncher-LINUX_Ubuntu-20.04-v${{ env.VERSION }}-${{ github.sha }}
          path: ./all-builds/EdgeNodeLauncher-LINUX_Ubuntu-20.04

      - name: Download macOS build artifacts
        uses: actions/download-artifact@v4
        with:
          name: EdgeNodeLauncher-OSX-arm64-v${{ env.VERSION }}-${{ github.sha }}
          path: ./all-builds/EdgeNodeLauncher-OSX-arm64
